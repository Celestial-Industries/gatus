name: Go Binary

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Gatus Repository
        uses: actions/checkout@v4
        with:
          repository: 'TwiN/gatus'
          ref: 'master'

      - name: Get Go version
        id: get-go-version
        run: |
          # Extract Go version from go.mod in Gatus repo
          go_version=$(grep -oP '^go \K[^\s]+' go.mod)

          # Set up Go with the extracted version
          echo "go_version=$go_version" >> $GITHUB_ENV
        shell: bash
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.get-go-version.outputs.go_version }}

      - name: Build Gatus Go binaries (linux, arm, arm64)
        run: |
          # From Gatus Dockerfile
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o gatus-linux .
          # ARM builds # might be easier to us native go ability see: https://github.com/TwiN/gatus/tree/master#installing-as-binary
          CGO_ENABLED=0 GOOS=linux GOARCH=arm go build -a -installsuffix cgo -o gatus-linux-arm .
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -installsuffix cgo -o gatus-linux-arm64 .

      - name: Upload linux artifact
        uses: actions/upload-artifact@v3
        with:
          name: gatus-linux
          path: ./gatus-linux
  
      - name: Upload linux ARM artifact
        uses: actions/upload-artifact@v3
        with:
          name: gatus-linux-arm
          path: ./gatus-linux-arm
  
      - name: Upload linux ARM64 artifact
        uses: actions/upload-artifact@v3
        with:
          name: gatus-linux-arm64
          path: ./gatus-linux-arm64
